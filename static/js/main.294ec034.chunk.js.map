{"version":3,"sources":["components/DraggableLink.tsx","App.tsx","registerServiceWorker.ts","store.ts","actions/diagram.ts","reducers/diagramReducer.ts","index.tsx"],"names":["DraggableLink","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","go","myPalette","makePort","name","spot","output","input","Shape","fill","stroke","desiredSize","Size","alignment","alignmentFocus","portId","fromSpot","toSpot","fromLinkable","toLinkable","cursor","showSmallPorts","node","show","ports","each","port","initializePallete","Palette","maxSelectionCount","nodeTemplateMap","state","myDiagram","linkTemplate","Link","locationSpot","Spot","Center","selectionAdornmentTemplate","Adornment","isPanelMain","strokeWidth","toArrow","routing","AvoidsNodes","curve","JumpOver","corner","toShortLength","Binding","model","GraphLinksModel","text","figure","points","List","addAll","Point","save","makeImage","scale","saveDiagramProperties","localStorage","setItem","JSON","stringify","toJson","isModified","setState","undo","commandHandler","redo","clear","load","initJSON","parse","getItem","Model","fromJson","loadDiagramProperties","pos","modelData","position","initialPosition","GraphObject","make","_this2","Diagram","grid","Panel","interval","undoManager.isEnabled","relinkingTool.fromHandleArchetype","segmentIndex","relinkingTool.toHandleArchetype","linkReshapingTool.handleArchetype","rotatingTool.handleAngle","rotatingTool.handleDistance","rotatingTool.snapAngleMultiple","rotatingTool.snapAngleEpsilon","addDiagramListener","e","button","document","getElementById","disabled","idx","title","indexOf","substr","nodeSelectionAdornmentTemplate","strokeDashArray","Placeholder","nodeResizeAdornmentTemplate","Right","TopLeft","Top","TopRight","Left","BottomLeft","Bottom","BottomRight","nodeRotateAdornmentTemplate","locationObjectName","geometryString","isGeometryPositioned","nodeTemplate","Node","makeTwoWay","selectable","resizable","resizeObjectName","resizeAdornmentTemplate","rotatable","rotateAdornmentTemplate","TextBlock","font","margin","maxSize","NaN","wrap","WrapFit","editable","mouseEnter","mouseLeave","linkSelectionAdornmentTemplate","relinkableFrom","relinkableTo","reshapable","ofObject","textAlign","minSize","react_default","a","createElement","style","flex","display","flexFlow","id","marginRight","backgroundColor","border","onClick","width","React","PureComponent","App","className","components_DraggableLink","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","mainReducer","actionCreator","actionCreatorFactory","init","updateNodeColor","UpdateNodeText","addNode","removeNode","removeLink","nodeSelected","nodeDeselected","colors","getRandomColor","Math","floor","random","length","diagramReducer","reducerWithInitialState","nodeDataArray","key","color","label","linkDataArray","selectedNodeKeys","case","payload","objectSpread","updatedNodes","map","nodeIndex","findIndex","concat","toConsumableArray","slice","linksToAdd","parent","from","to","nodeToRemoveIndex","linkToRemoveIndex","link","nodeIndexToRemove","build","gojsKey","process","REACT_APP_GOJS_KEY","licenseKey","ReactDOM","render","es","store","createStore","applyMiddleware","apply","src_App_0","URL","toString","origin","addEventListener","fetch","response","status","headers","get","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.294ec034.chunk.js","sourcesContent":["import React from 'react';\r\nimport go from 'gojs';\r\nimport './MyDiagram.css';\r\n\r\ninterface MyDiagramProps {}\r\n\r\ninterface MyDiagramState {\r\n    myDiagram;\r\n}\r\n\r\nclass DraggableLink extends React.PureComponent<MyDiagramProps, MyDiagramState> {\r\n    go: any;\r\n    myPalette: any;\r\n\r\n    constructor(props: MyDiagramProps) {\r\n        super(props);\r\n        this.go = go.GraphObject.make;\r\n        this.state = {\r\n            myDiagram: null\r\n        };\r\n    }\r\n\r\n    // Define a function for creating a \"port\" that is normally transparent.\r\n    // The \"name\" is used as the GraphObject.portId, the \"spot\" is used to control how links connect\r\n    // and where the port is positioned on the node, and the boolean \"output\" and \"input\" arguments\r\n    // control whether the user can draw links from or to the port.\r\n    makePort = (name, spot, output, input) => {\r\n        // the port is basically just a small transparent square\r\n        return this.go(go.Shape, 'Circle', {\r\n            fill: null, // not seen, by default; set to a translucent gray by showSmallPorts, defined below\r\n            stroke: null,\r\n            desiredSize: new go.Size(7, 7),\r\n            alignment: spot, // align the port on the main Shape\r\n            alignmentFocus: spot, // just inside the Shape\r\n            portId: name, // declare this object to be a \"port\"\r\n            fromSpot: spot,\r\n            toSpot: spot, // declare where links may connect at this port\r\n            fromLinkable: output,\r\n            toLinkable: input, // declare whether the user may draw links to/from here\r\n            cursor: 'pointer' // show a different cursor to indicate potential link point\r\n        });\r\n    };\r\n\r\n    showSmallPorts = (node, show) => {\r\n        node.ports.each(function(port) {\r\n            if (port.portId !== '') {\r\n                // don't change the default port, which is the big shape\r\n                port.fill = show ? 'rgba(0,0,0,.3)' : null;\r\n            }\r\n        });\r\n    };\r\n\r\n    componentDidMount() {\r\n        let myDiagram = this.go(\r\n            go.Diagram,\r\n            'myDiagramDiv', // create a Diagram for the DIV HTML element\r\n            {\r\n                grid: this.go(\r\n                    go.Panel,\r\n                    'Grid',\r\n                    this.go(go.Shape, 'LineH', { stroke: 'lightgray', strokeWidth: 0.5 }),\r\n                    this.go(go.Shape, 'LineH', { stroke: 'gray', strokeWidth: 0.5, interval: 10 }),\r\n                    this.go(go.Shape, 'LineV', { stroke: 'lightgray', strokeWidth: 0.5 }),\r\n                    this.go(go.Shape, 'LineV', { stroke: 'gray', strokeWidth: 0.5, interval: 10 })\r\n                ),\r\n                'undoManager.isEnabled': true,\r\n                'relinkingTool.fromHandleArchetype': this.go(go.Shape, 'Diamond', {\r\n                    segmentIndex: 0,\r\n                    cursor: 'pointer',\r\n                    desiredSize: new go.Size(8, 8),\r\n                    fill: 'tomato',\r\n                    stroke: 'darkred'\r\n                }),\r\n                'relinkingTool.toHandleArchetype': this.go(go.Shape, 'Diamond', {\r\n                    segmentIndex: -1,\r\n                    cursor: 'pointer',\r\n                    desiredSize: new go.Size(8, 8),\r\n                    fill: 'darkred',\r\n                    stroke: 'tomato'\r\n                }),\r\n                'linkReshapingTool.handleArchetype': this.go(go.Shape, 'Diamond', {\r\n                    desiredSize: new go.Size(7, 7),\r\n                    fill: 'lightblue',\r\n                    stroke: 'deepskyblue'\r\n                }),\r\n                'rotatingTool.handleAngle': 270,\r\n                'rotatingTool.handleDistance': 30,\r\n                'rotatingTool.snapAngleMultiple': 15,\r\n                'rotatingTool.snapAngleEpsilon': 15\r\n            }\r\n        );\r\n\r\n        // when the document is modified, add a \"*\" to the title and enable the \"Save\" button\r\n        myDiagram.addDiagramListener('Modified', function(e) {\r\n            var button = document.getElementById('SaveButton') as HTMLButtonElement;\r\n            if (button) {\r\n                button.disabled = !myDiagram.isModified;\r\n            }\r\n            var idx = document.title.indexOf('*');\r\n            if (myDiagram.isModified) {\r\n                if (idx < 0) {\r\n                    document.title += '*';\r\n                }\r\n            } else {\r\n                if (idx >= 0) {\r\n                    document.title = document.title.substr(0, idx);\r\n                }\r\n            }\r\n        });\r\n\r\n        const nodeSelectionAdornmentTemplate = this.go(\r\n            go.Adornment,\r\n            'Auto',\r\n            this.go(go.Shape, { fill: null, stroke: 'deepskyblue', strokeWidth: 1.5, strokeDashArray: [4, 2] }),\r\n            this.go(go.Placeholder)\r\n        );\r\n\r\n        const nodeResizeAdornmentTemplate = this.go(\r\n            go.Adornment,\r\n            'Spot',\r\n            { locationSpot: go.Spot.Right },\r\n            this.go(go.Placeholder),\r\n            this.go(go.Shape, {\r\n                alignment: go.Spot.TopLeft,\r\n                cursor: 'nw-resize',\r\n                desiredSize: new go.Size(6, 6),\r\n                fill: 'lightblue',\r\n                stroke: 'deepskyblue'\r\n            }),\r\n            this.go(go.Shape, {\r\n                alignment: go.Spot.Top,\r\n                cursor: 'n-resize',\r\n                desiredSize: new go.Size(6, 6),\r\n                fill: 'lightblue',\r\n                stroke: 'deepskyblue'\r\n            }),\r\n            this.go(go.Shape, {\r\n                alignment: go.Spot.TopRight,\r\n                cursor: 'ne-resize',\r\n                desiredSize: new go.Size(6, 6),\r\n                fill: 'lightblue',\r\n                stroke: 'deepskyblue'\r\n            }),\r\n\r\n            this.go(go.Shape, {\r\n                alignment: go.Spot.Left,\r\n                cursor: 'w-resize',\r\n                desiredSize: new go.Size(6, 6),\r\n                fill: 'lightblue',\r\n                stroke: 'deepskyblue'\r\n            }),\r\n            this.go(go.Shape, {\r\n                alignment: go.Spot.Right,\r\n                cursor: 'e-resize',\r\n                desiredSize: new go.Size(6, 6),\r\n                fill: 'lightblue',\r\n                stroke: 'deepskyblue'\r\n            }),\r\n\r\n            this.go(go.Shape, {\r\n                alignment: go.Spot.BottomLeft,\r\n                cursor: 'se-resize',\r\n                desiredSize: new go.Size(6, 6),\r\n                fill: 'lightblue',\r\n                stroke: 'deepskyblue'\r\n            }),\r\n            this.go(go.Shape, {\r\n                alignment: go.Spot.Bottom,\r\n                cursor: 's-resize',\r\n                desiredSize: new go.Size(6, 6),\r\n                fill: 'lightblue',\r\n                stroke: 'deepskyblue'\r\n            }),\r\n            this.go(go.Shape, {\r\n                alignment: go.Spot.BottomRight,\r\n                cursor: 'sw-resize',\r\n                desiredSize: new go.Size(6, 6),\r\n                fill: 'lightblue',\r\n                stroke: 'deepskyblue'\r\n            })\r\n        );\r\n\r\n        const nodeRotateAdornmentTemplate = this.go(\r\n            go.Adornment,\r\n            { locationSpot: go.Spot.Center, locationObjectName: 'CIRCLE' },\r\n            this.go(go.Shape, 'Circle', {\r\n                name: 'CIRCLE',\r\n                cursor: 'pointer',\r\n                desiredSize: new go.Size(7, 7),\r\n                fill: 'lightblue',\r\n                stroke: 'deepskyblue'\r\n            }),\r\n            this.go(go.Shape, {\r\n                geometryString: 'M3.5 7 L3.5 30',\r\n                isGeometryPositioned: true,\r\n                stroke: 'deepskyblue',\r\n                strokeWidth: 1.5,\r\n                strokeDashArray: [4, 2]\r\n            })\r\n        );\r\n\r\n        // define a simple Node template\r\n        myDiagram.nodeTemplate = this.go(\r\n            go.Node,\r\n            'Spot',\r\n            { locationSpot: go.Spot.Center },\r\n            new go.Binding('location', 'loc', go.Point.parse).makeTwoWay(go.Point.stringify),\r\n            { selectable: true, selectionAdornmentTemplate: nodeSelectionAdornmentTemplate },\r\n            { resizable: true, resizeObjectName: 'PANEL', resizeAdornmentTemplate: nodeResizeAdornmentTemplate },\r\n            { rotatable: true, rotateAdornmentTemplate: nodeRotateAdornmentTemplate },\r\n            new go.Binding('angle').makeTwoWay(),\r\n            // the main object is a Panel that surrounds a TextBlock with a Shape\r\n            this.go(\r\n                go.Panel,\r\n                'Auto',\r\n                { name: 'PANEL' },\r\n                new go.Binding('desiredSize', 'size', go.Size.parse).makeTwoWay(go.Size.stringify),\r\n                this.go(\r\n                    go.Shape,\r\n                    'Rectangle', // default figure\r\n                    {\r\n                        portId: '', // the default port: if no spot on link data, use closest side\r\n                        fromLinkable: true,\r\n                        toLinkable: true,\r\n                        cursor: 'pointer',\r\n                        fill: 'white', // default color\r\n                        strokeWidth: 2\r\n                    },\r\n                    new go.Binding('figure'),\r\n                    new go.Binding('fill')\r\n                ),\r\n                this.go(\r\n                    go.TextBlock,\r\n                    {\r\n                        font: 'bold 11pt Helvetica, Arial, sans-serif',\r\n                        margin: 8,\r\n                        maxSize: new go.Size(160, NaN),\r\n                        wrap: go.TextBlock.WrapFit,\r\n                        editable: true\r\n                    },\r\n                    new go.Binding('text').makeTwoWay()\r\n                )\r\n            ),\r\n            // four small named ports, one on each side:\r\n            this.makePort('T', go.Spot.Top, false, true),\r\n            this.makePort('L', go.Spot.Left, true, true),\r\n            this.makePort('R', go.Spot.Right, true, true),\r\n            this.makePort('B', go.Spot.Bottom, true, false),\r\n            {\r\n                // handle mouse enter/leave events to show/hide the ports\r\n                mouseEnter: (e, node) => {\r\n                    this.showSmallPorts(node, true);\r\n                },\r\n                mouseLeave: (e, node) => {\r\n                    this.showSmallPorts(node, false);\r\n                }\r\n            }\r\n        );\r\n\r\n        let linkSelectionAdornmentTemplate = this.go(\r\n            go.Adornment,\r\n            'Link',\r\n            this.go(\r\n                go.Shape,\r\n                // isPanelMain declares that this Shape shares the Link.geometry\r\n                { isPanelMain: true, fill: null, stroke: 'deepskyblue', strokeWidth: 0 }\r\n            ) // use selection object's strokeWidth\r\n        );\r\n\r\n        myDiagram.linkTemplate = this.go(\r\n            go.Link, // the whole link panel\r\n            { selectable: true, selectionAdornmentTemplate: linkSelectionAdornmentTemplate },\r\n            { relinkableFrom: true, relinkableTo: true, reshapable: true },\r\n            {\r\n                routing: go.Link.AvoidsNodes,\r\n                curve: go.Link.JumpOver,\r\n                corner: 5,\r\n                toShortLength: 4\r\n            },\r\n            new go.Binding('points').makeTwoWay(),\r\n            this.go(\r\n                go.Shape, // the link path shape\r\n                { isPanelMain: true, strokeWidth: 2 }\r\n            ),\r\n            this.go(\r\n                go.Shape, // the arrowhead\r\n                { toArrow: 'Standard', stroke: null }\r\n            ),\r\n            this.go(\r\n                go.Panel,\r\n                'Auto',\r\n                new go.Binding('visible', 'isSelected').ofObject(),\r\n                this.go(\r\n                    go.Shape,\r\n                    'RoundedRectangle', // the link shape\r\n                    { fill: '#F8F8F8', stroke: null }\r\n                ),\r\n                this.go(\r\n                    go.TextBlock,\r\n                    {\r\n                        textAlign: 'center',\r\n                        font: '10pt helvetica, arial, sans-serif',\r\n                        stroke: '#919191',\r\n                        margin: 2,\r\n                        minSize: new go.Size(10, NaN),\r\n                        editable: true\r\n                    },\r\n                    new go.Binding('text').makeTwoWay()\r\n                )\r\n            )\r\n        );\r\n\r\n        this.setState(\r\n            {\r\n                myDiagram: myDiagram\r\n            },\r\n            () => {\r\n                this.initializePallete();\r\n            }\r\n        );\r\n    }\r\n\r\n    initializePallete = () => {\r\n        // initialize the Palette that is on the left side of the page\r\n        this.myPalette = this.go(\r\n            go.Palette,\r\n            'myPaletteDiv', // must name or refer to the DIV HTML element\r\n            {\r\n                maxSelectionCount: 1,\r\n                nodeTemplateMap: this.state.myDiagram.nodeTemplateMap, // share the templates used by myDiagram\r\n                // simplify the link template, just in this Palette\r\n                linkTemplate: this.go(\r\n                    go.Link,\r\n                    {\r\n                        // because the GridLayout.alignment is Location and the nodes have locationSpot == Spot.Center,\r\n                        // to line up the Link in the same manner we have to pretend the Link has the same location spot\r\n                        locationSpot: go.Spot.Center,\r\n                        selectionAdornmentTemplate: this.go(\r\n                            go.Adornment,\r\n                            'Link',\r\n                            { locationSpot: go.Spot.Center },\r\n                            this.go(go.Shape, { isPanelMain: true, fill: null, stroke: 'deepskyblue', strokeWidth: 0 }),\r\n                            this.go(\r\n                                go.Shape, // the arrowhead\r\n                                { toArrow: 'Standard', stroke: null }\r\n                            )\r\n                        )\r\n                    },\r\n                    {\r\n                        routing: go.Link.AvoidsNodes,\r\n                        curve: go.Link.JumpOver,\r\n                        corner: 5,\r\n                        toShortLength: 4\r\n                    },\r\n                    new go.Binding('points'),\r\n                    this.go(\r\n                        go.Shape, // the link path shape\r\n                        { isPanelMain: true, strokeWidth: 2 }\r\n                    ),\r\n                    this.go(\r\n                        go.Shape, // the arrowhead\r\n                        { toArrow: 'Standard', stroke: null }\r\n                    )\r\n                ),\r\n                model: new go.GraphLinksModel(\r\n                    [\r\n                        // specify the contents of the Palette\r\n                        { text: 'Start', figure: 'Circle', fill: '#00AD5F' },\r\n                        { text: 'Step' },\r\n                        { text: 'DB', figure: 'Database', fill: 'lightgray' },\r\n                        { text: '???', figure: 'Diamond', fill: 'lightskyblue' },\r\n                        { text: 'End', figure: 'Circle', fill: '#CE0620' },\r\n                        { text: 'Comment', figure: 'RoundedRectangle', fill: 'lightyellow' }\r\n                    ],\r\n                    [\r\n                        // the Palette also has a disconnected Link, which the user can drag-and-drop\r\n                        {\r\n                            points: new go.List(/*go.Point*/).addAll([\r\n                                new go.Point(0, 0),\r\n                                new go.Point(30, 0),\r\n                                new go.Point(30, 40),\r\n                                new go.Point(60, 40)\r\n                            ])\r\n                        }\r\n                    ]\r\n                )\r\n            }\r\n        );\r\n    };\r\n\r\n    // Show the diagram's model in JSON format that the user may edit\r\n    save = () => {\r\n        this.state.myDiagram.makeImage({ scale: 1.5 });\r\n        this.saveDiagramProperties(); // do this first, before writing to JSON\r\n        const { myDiagram } = this.state;\r\n        localStorage.setItem('savedJSON', JSON.stringify(myDiagram.model.toJson()));\r\n        myDiagram.isModified = false;\r\n        this.setState({\r\n            myDiagram: myDiagram\r\n        });\r\n    };\r\n\r\n    undo = () => {\r\n        this.state.myDiagram.commandHandler.undo();\r\n    };\r\n\r\n    redo = () => {\r\n        this.state.myDiagram.commandHandler.redo();\r\n    };\r\n\r\n    clear = () => {\r\n        this.state.myDiagram.clear();\r\n    };\r\n\r\n    saveDiagramProperties() {\r\n        const { myDiagram } = this.state;\r\n        myDiagram.model.modelData.position = go.Point.stringify(this.state.myDiagram.position);\r\n        this.setState({ myDiagram: myDiagram });\r\n    }\r\n\r\n    load = () => {\r\n        // const initJSON = {\r\n        //   \"class\": \"GraphLinksModel\",\r\n        //   \"linkFromPortIdProperty\": \"fromPort\",\r\n        //   \"linkToPortIdProperty\": \"toPort\",\r\n        //   \"modelData\": { \"position\": \"-390.5 -291.9012470688931\" },\r\n        //   \"nodeDataArray\": [\r\n        //     { \"text\": \"Start\", \"figure\": \"Circle\", \"fill\": \"#00AD5F\", \"key\": -1, \"loc\": \"40 -243.4012470688931\", \"size\": \"73.80249413778616 87\" },\r\n        //     { \"text\": \"Step\", \"key\": -2, \"loc\": \"50 -140\" },\r\n        //     { \"text\": \"DB\", \"figure\": \"Database\", \"fill\": \"lightgray\", \"key\": -3, \"loc\": \"40 -30\" }\r\n        //   ],\r\n        //   \"linkDataArray\": [\r\n        //     { \"from\": -1, \"to\": -2, \"fromPort\": \"\", \"toPort\": \"\", \"points\": [40, -213.09875293110696, 40, -203.09875293110696, 40, -204, 40, -204, 40, -188, 50, -188, 50, -166.9377243041992, 50, -156.9377243041992] },\r\n        //     { \"from\": -2, \"to\": -3, \"fromPort\": \"B\", \"toPort\": \"T\", \"points\": [50, -123.06227569580076, 50, -113.06227569580076, 50, -92.9688621520996, 40, -92.9688621520996, 40, -72.87544860839844, 40, -62.875448608398436] }\r\n        //   ]\r\n        // };\r\n        const initJSON = JSON.parse(localStorage.getItem('savedJSON'));\r\n        let { myDiagram } = this.state;\r\n        myDiagram.model = go.Model.fromJson(initJSON);\r\n        this.setState({\r\n            myDiagram: myDiagram\r\n        });\r\n        this.loadDiagramProperties(); // do this after the Model.modelData has been brought into memory\r\n    };\r\n\r\n    loadDiagramProperties = () => {\r\n        // set Diagram.initialPosition, not Diagram.position, to handle initialization side-effects\r\n        let { position: pos } = this.state.myDiagram.model.modelData;\r\n        if (pos) {\r\n            this.state.myDiagram.initialPosition = go.Point.parse(pos);\r\n        }\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div style={{ flex: 1, display: 'flex', flexFlow: 'row' }}>\r\n                <div\r\n                    id=\"myPaletteDiv\"\r\n                    style={{ flex: 1, marginRight: '2px', backgroundColor: 'whitesmoke', border: 'solid 1px black' }}\r\n                />\r\n                <div style={{ flex: 4, display: 'flex', flexFlow: 'column', border: 'solid 4px black' }}>\r\n                    <div\r\n                        id=\"myDiagramDiv\"\r\n                        style={{ flex: 1, display: 'flex', flexFlow: 'column', border: 'solid 1px black' }}\r\n                    />\r\n                    <div>\r\n                        <button onClick={this.load} style={{ width: '100px', margin: '10px', cursor: 'pointer' }}>\r\n                            Load\r\n                        </button>\r\n                        <button\r\n                            id=\"SaveButton\"\r\n                            onClick={this.save}\r\n                            style={{ width: '100px', margin: '10px', cursor: 'pointer' }}\r\n                        >\r\n                            Save\r\n                        </button>\r\n                        <button onClick={this.undo} style={{ width: '100px', margin: '10px', cursor: 'pointer' }}>\r\n                            Undo\r\n                        </button>\r\n                        <button onClick={this.redo} style={{ width: '100px', margin: '10px', cursor: 'pointer' }}>\r\n                            Redo\r\n                        </button>\r\n                        <button onClick={this.clear} style={{ width: '100px', margin: '10px', cursor: 'pointer' }}>\r\n                            Clear\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default DraggableLink;\r\n","import React from 'react';\r\nimport './App.css';\r\n// import AppButtons from './components/AppButtons';\r\n// import MyDiagramContainer from './components/MyDiagramContainer';\r\n// import SelectionDetails from './components/SelectionDetails';\r\n\r\nimport DraggableLink from './components/DraggableLink';\r\n\r\nclass App extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"App\">\r\n                <header className=\"App-header\">\r\n                    <h1 className=\"App-title\">React + GoJS Demo</h1>\r\n                </header>\r\n                {/* <AppButtons /> */}\r\n                {/* <SelectionDetails /> */}\r\n                {/* <MyDiagramContainer /> */}\r\n\r\n                <DraggableLink />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// tslint:disable:no-console\r\n// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the 'N+1' visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n        // [::1] is the IPv6 localhost address.\r\n        window.location.hostname === '[::1]' ||\r\n        // 127.0.0.1/8 is considered localhost for IPv4.\r\n        window.location.hostname.match(\r\n            /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n        )\r\n);\r\n\r\nexport default function register() {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n        // The URL constructor is available in all browsers that support SW.\r\n        const publicUrl = new URL(\r\n            process.env.PUBLIC_URL!,\r\n            window.location.toString()\r\n        );\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            // Our service worker won't work if PUBLIC_URL is on a different origin\r\n            // from what our page is served on. This might happen if a CDN is used to\r\n            // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n            return;\r\n        }\r\n\r\n        window.addEventListener('load', () => {\r\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n            if (!isLocalhost) {\r\n                // Is not local host. Just register service worker\r\n                registerValidSW(swUrl);\r\n            } else {\r\n                // This is running on localhost. Lets check if a service worker still exists or not.\r\n                checkValidServiceWorker(swUrl);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string) {\r\n    navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then(registration => {\r\n            registration.onupdatefound = () => {\r\n                const installingWorker = registration.installing;\r\n                if (installingWorker) {\r\n                    installingWorker.onstatechange = () => {\r\n                        if (installingWorker.state === 'installed') {\r\n                            if (navigator.serviceWorker.controller) {\r\n                                // At this point, the old content will have been purged and\r\n                                // the fresh content will have been added to the cache.\r\n                                // It's the perfect time to display a 'New content is\r\n                                // available; please refresh.' message in your web app.\r\n                                console.log(\r\n                                    'New content is available; please refresh.'\r\n                                );\r\n                            } else {\r\n                                // At this point, everything has been precached.\r\n                                // It's the perfect time to display a\r\n                                // 'Content is cached for offline use.' message.\r\n                                console.log(\r\n                                    'Content is cached for offline use.'\r\n                                );\r\n                            }\r\n                        }\r\n                    };\r\n                }\r\n            };\r\n        })\r\n        .catch(error => {\r\n            console.error('Error during service worker registration:', error);\r\n        });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl)\r\n        .then(response => {\r\n            // Ensure service worker exists, and that we really are getting a JS file.\r\n            if (\r\n                response.status === 404 ||\r\n                response.headers.get('content-type')!.indexOf('javascript') ===\r\n                    -1\r\n            ) {\r\n                // No service worker found. Probably a different app. Reload the page.\r\n                navigator.serviceWorker.ready.then(registration => {\r\n                    registration.unregister().then(() => {\r\n                        window.location.reload();\r\n                    });\r\n                });\r\n            } else {\r\n                // Service worker found. Proceed as normal.\r\n                registerValidSW(swUrl);\r\n            }\r\n        })\r\n        .catch(() => {\r\n            console.log(\r\n                'No internet connection found. App is running in offline mode.'\r\n            );\r\n        });\r\n}\r\n\r\nexport function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n        navigator.serviceWorker.ready.then(registration => {\r\n            registration.unregister();\r\n        });\r\n    }\r\n}\r\n","import { createStore, applyMiddleware, Middleware } from 'redux';\r\n\r\nexport const create = mainReducer => {\r\n    const middlewares: Array<Middleware> = [];\r\n\r\n    if (process.env.NODE_ENV !== `production`) {\r\n        const { logger } = require(`redux-logger`);\r\n        middlewares.push(logger);\r\n    }\r\n\r\n    const store = createStore(mainReducer, applyMiddleware(...middlewares));\r\n    return store;\r\n};\r\n","import { actionCreatorFactory } from 'typescript-fsa';\r\nimport { NodeModel } from '../reducers/diagramReducer';\r\nimport { DiagramModel, LinkModel } from 'react-gojs';\r\n\r\nconst actionCreator = actionCreatorFactory('DIAGRAM');\r\n\r\nexport interface UpdateNodeTextEvent {\r\n    key: string;\r\n    text: string;\r\n}\r\n\r\nexport const init = actionCreator<DiagramModel<NodeModel, LinkModel>>('INIT');\r\nexport const updateNodeColor = actionCreator('UPDATE_NODE_COLOR');\r\nexport const UpdateNodeText = actionCreator<UpdateNodeTextEvent>('UPDATE_NODE_TEXT');\r\nexport const addNode = actionCreator<string>('ADD_NODE');\r\nexport const removeNode = actionCreator<string>('REMOVE_NODE');\r\nexport const removeLink = actionCreator<LinkModel>('REMOVE_LINK');\r\nexport const nodeSelected = actionCreator<string>('NODE_SELECTED');\r\nexport const nodeDeselected = actionCreator<string>('NODE_DESELECTED');\r\n","import { reducerWithInitialState } from 'typescript-fsa-reducers';\r\nimport { Reducer } from 'redux';\r\nimport {\r\n    init,\r\n    updateNodeColor,\r\n    addNode,\r\n    nodeSelected,\r\n    nodeDeselected,\r\n    removeNode,\r\n    removeLink,\r\n    UpdateNodeText,\r\n    UpdateNodeTextEvent\r\n} from '../actions/diagram';\r\nimport { BaseNodeModel, DiagramModel, LinkModel } from 'react-gojs';\r\n\r\nexport interface DiagramState {\r\n    model: DiagramModel<NodeModel, LinkModel>;\r\n    selectedNodeKeys: string[];\r\n}\r\n\r\nexport interface NodeModel extends BaseNodeModel {\r\n    label: string;\r\n    color: string;\r\n}\r\n\r\nconst initHandler = (state: DiagramState, payload: DiagramModel<NodeModel, LinkModel>): DiagramState => {\r\n    return {\r\n        ...state,\r\n        model: payload\r\n    };\r\n};\r\n\r\nconst colors = ['lightblue', 'orange', 'lightgreen', 'pink', 'yellow', 'red', 'grey', 'magenta', 'cyan'];\r\n\r\nconst getRandomColor = () => {\r\n    return colors[Math.floor(Math.random() * colors.length)];\r\n};\r\n\r\nconst updateNodeColorHandler = (state: DiagramState): DiagramState => {\r\n    const updatedNodes = state.model.nodeDataArray.map(node => {\r\n        return {\r\n            ...node,\r\n            color: getRandomColor()\r\n        };\r\n    });\r\n\r\n    return {\r\n        ...state,\r\n        model: {\r\n            ...state.model,\r\n            nodeDataArray: updatedNodes\r\n        }\r\n    };\r\n};\r\n\r\nconst updateNodeTextHandler = (state: DiagramState, payload: UpdateNodeTextEvent): DiagramState => {\r\n    const nodeIndex = state.model.nodeDataArray.findIndex(node => node.key === payload.key);\r\n\r\n    return {\r\n        ...state,\r\n        model: {\r\n            ...state.model,\r\n            nodeDataArray: [\r\n                ...state.model.nodeDataArray.slice(0, nodeIndex),\r\n                {\r\n                    ...state.model.nodeDataArray[nodeIndex],\r\n                    label: payload.text\r\n                },\r\n                ...state.model.nodeDataArray.slice(nodeIndex + 1)\r\n            ]\r\n        }\r\n    };\r\n};\r\n\r\nconst addNodeHandler = (state: DiagramState, payload: string): DiagramState => {\r\n    const linksToAdd: LinkModel[] = state.selectedNodeKeys.map(parent => {\r\n        return { from: parent, to: payload };\r\n    });\r\n    return {\r\n        ...state,\r\n        model: {\r\n            ...state.model,\r\n            nodeDataArray: [...state.model.nodeDataArray, { key: payload, label: payload, color: getRandomColor() }],\r\n            linkDataArray:\r\n                linksToAdd.length > 0\r\n                    ? [...state.model.linkDataArray].concat(linksToAdd)\r\n                    : [...state.model.linkDataArray]\r\n        }\r\n    };\r\n};\r\n\r\nconst removeNodeHandler = (state: DiagramState, payload: string): DiagramState => {\r\n    const nodeToRemoveIndex = state.model.nodeDataArray.findIndex(node => node.key === payload);\r\n    if (nodeToRemoveIndex === -1) {\r\n        return state;\r\n    }\r\n    return {\r\n        ...state,\r\n        model: {\r\n            ...state.model,\r\n            nodeDataArray: [\r\n                ...state.model.nodeDataArray.slice(0, nodeToRemoveIndex),\r\n                ...state.model.nodeDataArray.slice(nodeToRemoveIndex + 1)\r\n            ]\r\n        }\r\n    };\r\n};\r\n\r\nconst removeLinkHandler = (state: DiagramState, payload: LinkModel): DiagramState => {\r\n    const linkToRemoveIndex = state.model.linkDataArray.findIndex(\r\n        link => link.from === payload.from && link.to === payload.to\r\n    );\r\n    if (linkToRemoveIndex === -1) {\r\n        return state;\r\n    }\r\n    return {\r\n        ...state,\r\n        model: {\r\n            ...state.model,\r\n            linkDataArray: [\r\n                ...state.model.linkDataArray.slice(0, linkToRemoveIndex),\r\n                ...state.model.linkDataArray.slice(linkToRemoveIndex + 1)\r\n            ]\r\n        }\r\n    };\r\n};\r\n\r\nconst nodeSelectedHandler = (state: DiagramState, payload: string): DiagramState => {\r\n    return {\r\n        ...state,\r\n        selectedNodeKeys: [...state.selectedNodeKeys, payload]\r\n    };\r\n};\r\n\r\nconst nodeDeselectedHandler = (state: DiagramState, payload: string): DiagramState => {\r\n    const nodeIndexToRemove = state.selectedNodeKeys.findIndex(key => key === payload);\r\n    if (nodeIndexToRemove === -1) {\r\n        return state;\r\n    }\r\n    return {\r\n        ...state,\r\n        selectedNodeKeys: [\r\n            ...state.selectedNodeKeys.slice(0, nodeIndexToRemove),\r\n            ...state.selectedNodeKeys.slice(nodeIndexToRemove + 1)\r\n        ]\r\n    };\r\n};\r\n\r\nexport const diagramReducer: Reducer<DiagramState> = reducerWithInitialState<DiagramState>({\r\n    model: {\r\n        nodeDataArray: [{ key: 'Root', color: 'lightblue', label: 'Root' }],\r\n        linkDataArray: []\r\n    },\r\n    selectedNodeKeys: []\r\n})\r\n    .case(init, initHandler)\r\n    .case(updateNodeColor, updateNodeColorHandler)\r\n    .case(UpdateNodeText, updateNodeTextHandler)\r\n    .case(addNode, addNodeHandler)\r\n    .case(removeNode, removeNodeHandler)\r\n    .case(removeLink, removeLinkHandler)\r\n    .case(nodeSelected, nodeSelectedHandler)\r\n    .case(nodeDeselected, nodeDeselectedHandler)\r\n    .build();\r\n\r\nexport const modelSelector = (state: DiagramState) => state.model;\r\nexport const nodeSelectionSelector = (state: DiagramState) => state.selectedNodeKeys;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport registerServiceWorker from './registerServiceWorker';\r\nimport './index.css';\r\nimport { Provider } from 'react-redux';\r\nimport { create } from './store';\r\nimport { diagramReducer } from './reducers/diagramReducer';\r\nimport go from 'gojs';\r\n\r\nconst gojsKey = process.env.REACT_APP_GOJS_KEY;\r\n\r\nif (gojsKey) {\r\n    // tslint:disable-next-line:no-any\r\n    (go as any).licenseKey = gojsKey;\r\n}\r\n\r\nReactDOM.render(\r\n    <Provider store={create(diagramReducer)}>\r\n        <App />\r\n    </Provider>,\r\n    document.getElementById('root') as HTMLElement\r\n);\r\nregisterServiceWorker();\r\n"],"sourceRoot":""}